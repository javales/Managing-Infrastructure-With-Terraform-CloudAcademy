Cloud Academy - Managing Infrastructure With Terraform

INTRO
# Course Introduction

OVERVIEW
# What is Terraform?

https://www.terraform.io/downloads.html
Downloading to /usr/local/bin
echo $PATH

1. Write/Modify Configuration Files
2. Create an execution plan with .plan command (generates execution plan from a configuration)
3. Review the plan
4. Accept or Reject
5. Apply the changes with .apply command

To undo:
1. use version control to apply a previous configuration file
2. use the [destroy] or [tank] command to target components that need to be [deleted] or [recreated] respectively

Terraform uses Dependency information to plan the order of infrastructure changes
- builds a Resource Graph that captures all the dependency information
- depencies naturally described by your configuration
- changes can be applied in parallel when no dependencies exist
- can output the graph for visualization

Terraform supports Automation
- Integrating into a CI or CD pipeline
- Automatically create infrastructure to deploy new branches
- Can automatically accept Plans to have infrastructure update to the latest version
- Or, for Production environments, opt for Manual approval step
- With the generated Execution Plan and Resource Graph, can preview what will happen and in what order
- Finally, can generate a Plan *only* for reviewing Pull Requests

Migrating to Terraform
- if already invested in an IaaC solution, Terraform can help transfer control of infras over to Terraform
- supports importing existing resources to bring them under control using Import command
- can try this out in Manage AWS Resources with Terraform lab


TERRAFORM PARTS

# Terraform Configuration
- Hashicorp Configuration Language (HCL) used to write configurations in Terraform
-- structured configuration language that is both human and machine friendly
-- for use with command-line tools
-- specifically targeted towards DevOps tools, servers, etc.
- Interpolation syntax used to make configurations dynamic
- JSON can also be used by Terraform - mainly aimed at automated configuration generation that WON'T be seen by humans
- also supports commenting

* Most essential pieces of managing infrastructure with Terraform are called Resources
- Resources are the infras components managed by Terraform
-- Resource Examples: VMs, databases, or version control system
-- Declare resources in configuration and configure their properties all in HCL

- Resources are made available through Providers
-- Providers are the Infras Integrations
-- Configuration usually involves some form of credentials to grant access to provider's API
-- Provider routes the API provided by the underlying infras host

- Variables are configured as inputs to your configuration
-- includes a default variable value using "default = "..."" so no error if user does not provide a value

- Outputs are infras values you want to easily access
-- Example: DNS name of a load balancer, SSH command used to connect to an instance created by the configuration, 
-- When you apply a configuration, Terraform displays the Outputs you configure
-- access Outputs any time using [output] command
-- command is useful for integrating Terraform with scripting environments

- Data Sources fetch information defined outside the Terraform configuration
-- EXAMPLE: retrieve information from other projects using data sources made available by providers
-- no requirement that the data retrieved is managed by Terraform

HCL Syntax
- Supports 2 forms of Commenting: 1. /* */ and 2. #
- assigning values using = not required, but improve readability
- [fmt] command can automatically format a config file to follow the recommended spacing rules
- values assigned can be any of the supported Types
- Primitive Types: strings (always enclosed in double quotes), numbers, booleans
- Complex Types: lists (for primitive types, enclosed in brackets) and maps (assign a collection of keys and values, enclosed in curly brackets/"braces"), both allowed to be empty
-- in most cases, values can be interpolated inside strings EXAMPLE: image = "${var.image}"

- Configuration Blocks start with a keyword to indicate type of configuration (EXAMPLES: provider, variable, resource, output)
-- followed by one or more Strings
-- then a Map enclosed in Braces
-- usually ONE string after keyword indicating Name
-- for Resources there TWO strings 1. type of resource 2. name of resource used by T to identify resource
-- name used by T does NOT have to match name used by provider
-- name must be Unique

- Interpolation
-- EXAMPLE: image = "${var.image}"
-- ${var.name_of_string_variable}
-- for specific Key in a Map: ${var.name_of_map_variable["key"]}
-- for specific Item in a List: ${var.name_of_list_variable[index]} #index starts at 0
-- for values of Resource Attributes (all properties T knows about a resource): include arguments set in resource blocks, values set as a side effect of creating your resource: ${type.name.attribute}
-- from a Data Source, use same pattern as a Resource (but with data. at the beginning: ${data.type.name.attribute}
-- Use Conditions inside interpolation syntax to make branching decisions, like different size instance in test versus production
--- syntax: ${condition ? true_expr : false_expr}
--- condition must be boolean, can use equality operators == !=, numerical comparisons < > <= >=, logical operators && || !
--- EXAMPLE: machine_type = "${var.env == "production" ? "n1-highmem-64" : "n1-standard-1"}"
-- Basic math operations are supported on numbers + - * / %
-- Dozens of built-in functions https://www.terraform.io/docs/configuration/interpolation.html#supported-built-in-functions

Assigning Variables
- default key, used to infer type; if no default and no type specified, default type of String is used
- default value CAN'T use Interpolations
- when no default is provided, you MUST specify a value
- interactively prompts for values when no default is specified
- dash var (-var) options for both [plan] and [apply] commands EXAMPLE: -var 'env=staging'
BEST FOR VERSION CONTROL: use Variable Files
- use HCL syntax for defining variable values
- Variable files can be included using COMMAND: -var-file=../vars.auto.tfvars
-- included automatically when named terraform.tfvars or *.auto.tfvars
-- can use multiple variable files
-- files defined in [var-file] option over-ride variables defined using automatic variable files
USING ENVIRONMENT VARIABLES:
- EXAMPLE: TF_VAR_env=staging
- Must begin with TF_VAR_ followed by name of TF variable

- When a variable is assigned multiple times, the value of the variable is assigned to the one with the highest precedence
- Map Variables are NOT set to the highest precedent definition
- instead, values assigned to the map variable all are merged together into a single map
- Precedence order from lowest to highest

Configuration File Discovery
- running T [plan] or [apply] command, it will inspect cwd for files ending in .tf to discover configuration files written in HCL
- if using JSON, file extension should be .tf.json
- T can read a mix of .tf and .tf.json
- configuration files are loaded in alphabetical order
- common pattern: variables.tf, outputs.tf, main.tf
- the loaded files are essentially appended

Modules
- Another way to organize configurations is with Modules
- Modules are reusable configuration packages
- can be shared using sources like file systems, Github, Amazon S3, Terraform registries
- Terraform Modular Registries have benefit of supporting versions specified in HCL, while other sources don't have built-in support for modular versions
- Hashicorp hosts: https:registry.terraform.io
- ANYONE can publish modules to the registry
- Terraform Enterprise includes a private modular registry
- lab that demonstrates using modular registry to build

# Providers
- Definition: "The logical abstraction of an upstream API"

Plugin Architecture
- T doesn't ship with any providers built-in
- instead, plugins are downloaed as required by configuration
- Intialize T by running [init] command, which downloads plugins to "plugins" directory
- >100 T providers available
- can write your own provider plugins in Golang
- Custom providers: https://www.terraform.io/guides/writing-custom-terraform-providers.html

Provider Versioning
- Best Practice: constrain provider versions in your configurations
-- EXAMPLES:
"1.12.1"
">= 1.2, < 1.12"
"~> 1.7" #is like saying ">= 1.7.0, < 2.0.0"
- must use [-upgrade] option of the [init] command to force upgrades within constraints to occur

Provider Aliases
- Can declare multiple blocks for the same provider in your configuration
- EXAMPLE: when have resources with the same cloud provider but in multiple regions
- for T to identify multiple instances of single provider, must add an Alias
- Alias used by resources to indicate which instance of the provider to use
- One Default Provider is allowed, which is the one the doesn't specify an alias, used when a resource doesn't specify a provider
- EXAMPLE: (specifying a provider alias)
resource "google_compute_disk" "default" { 
  provider = "google.west"...
Providers https://www.terraform.io/docs/providers/index.html

Demo:
- Can use Interpolation to avoid putting credentials in version control
credentials = "${file("account.json")}"
- Also can use Environment Variables
https://www.terraform.io/docs/providers/google/guides/provider_reference.html#credentials

* Provider block interpolations are allowed except for Version and Alias which both must be hard-coded

COMMANDS
terraform init
- now set up credentials in GCP for T to use
- APIs & Services > Credentials
- Service account key (role: Owner, just for demo purposes)
- set up credentials in bash shell using COMMAND export GOOGLE_CREDENTIALS=/Users/ca/Downloads/Terraform\ GCP\ Demo-239423n23.json

# Resources
- Core of T configuration
- too many to discuss in one lesson
- instead covering aspects of resource configuration shared by all resources
- Meta-parameters, Provisioners, and Lifecycle blocks

Definition: A component of your infrastructure
- each resource has its own attributes and arguments

Meta-Parameters
- Configuration keys available to all resources
EXAMPLES: [provider], [depends_on]
Best Practice: rely on Implicit Dependencies when possible
- [depends_on] used when dependencies aren't implicitly captured
- Syntax: assign a list, include strings of format resourcetype.resourcename for the dependent upon resources
- resource is Created AFTER or Deleted BEFORE any depended upon resources
- [count] shows how many copies of resource to create
- can use 0 for [count = "${var.num_servers}"] to indicate you don't want the resource, and instead of removing the resource code altogether
* other examples at 2:20 include how to return a list of attribute values for all compute instance copies referred to as Splat Syntax

Provisioners
- Terraform is NOT a configuration management tool, recommending using a tool that is built for configuration management to manage software on machines
- all share a few keys
- can be used to run scripts when any resource is created or destroyed
- EXAMPLES: local, remote exec to run scripts on machine running T or an a remote machine, respectively

Lifecyle
- all resources can specify a lifecycle block
- lifecycle block can specify up to 3 optional keys
1. [create_before_destroy] boolean default false
2. [prevent_destroy] default false
3. [ignore_changes] tells T to ignore changes to the specified resource attributes (EXAMPLE: when T created a route table that has routes dynamically populated)

Demo
5:45
- provisioners are usually used in the create and destroy of VMs, but can be used in any resource block
- google compute engine API may be disabled, causing Apply command to fail
- [destroy]


# State
- T must keep track of the state of the resources it manages
Definition: Maps real world resources to your configuration, keeps track of metadata, and improves performance for large infrastructures
- by default, T will refresh its state before any operation
- state is used to generate plans

Where is state stored?
Backends
- T persists data in several different backends
- Enhanced Backends - [local] makes operations appear to be running locally
- default backend is [local] backend which stores data in a file on the local file system
- local backend stores state in local directory in file terraform.tfstate written in JSON
- [Remote state] is recommended for teams due to frequent merge conflicts with the state file
- remote state is also more secure, because the data can be encrpted at rest, and T only stores remote state in memory, never on disk
- requests for remote state are also encrypted using TLS
- can also access remote state using data sources, allowing different projects to access project state in a read-only fashion
- Locking - if backend supports locking, T will lock the state while an operation that could potentially write state changes is happening; this prevents state corruption

What is stored?
- terraform.tfstate file:
-- EXAMPLE: for one that manages an instance
-- top-level fields - version of the state format, version of T used, serial number that increments every time state changes, list of modules

Workspaces - containers for state
- can use workspaces to manage infras environments using the same configuration files
- EXAMPLE: may want to create a workspace for every brancing in the version control system
- local and cloud storage backends all support workspaces
- managed using the [workspace] command
- create new using [new]
- switch between workspaces using [select] subcommand
- if select a new workspace, there is no state until you apply the configuration
- can interpolate the current workspace in the configuration using terraform.workspace [${terraform.workspace}]
- useful for conditions that modify the configuration based on workspace EXAMPLE: when you have a development and production workspace

DEMO
# Two-Tier Application Demo
